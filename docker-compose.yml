---
services:
  # certbot:
  #   container_name: certbot
  #   environment:
  #     CLOUDFLARE_API_KEY: "${CLOUDFLARE_API_KEY}"
  #     CLOUDFLARE_EMAIL: "${EMAIL}"
  #   image: certbot/certbot
  #   volumes:
  #     - "${MOUNT}/certbot:/etc/letsencrypt"
  jd2:
    container_name: jd2
    environment:
      USER_ID: "${PGID}"
      GROUP_ID: "${PUID}"
      TZ: "${TZ}"
      DISPLAY_WIDTH: 1280
      DISPLAY_HEIGHT: 720
      # - "SECURE_CONNECTION=1"
    image: jlesage/jdownloader-2
    labels:
      ovh.dispenser.service: "syncthing"
    ports:
      - 5800:5800
      - 5900:5900
    restart: unless-stopped
    volumes:
      - "/home/devsterknight/jd2/config:/config:rw"
      - "/home/devsterknight/jd2/Downloads:/output:rw"
  flood:
    build:
      context: flood
      args:
        MEDIAINFO_VERSION: 0.7.98
        NODE_ENV: production
        VERSION: master
    environment:
      - "FLOOD_BASE_URI=${FLOOD_BASE_URI:-/}"
      - "FLOOD_SECRET=${FLOOD_SECRET}"
      - "RTORRENT_SCGI_HOST=${RTORRENT_SCGI_HOST:-127.0.0.1}"
      - "RTORRENT_SCGI_PORT=${RTORRENT_SCGI_PORT:-5000}"
      - "RTORRENT_SOCK=${RTORRENT_SOCK:-false}"
      - "FLOOD_ENABLE_SSL=${FLOOD_ENABLE_SSL:-false}"
    labels:
      ovh.dispenser.service: "flood"
    network_mode: "host"
    # ports:
    #   - "3000:3000"
    restart: unless-stopped
    volumes:
      - "${MOUNT}/docker/data/flood:/data"
  syncthing:
    container_name: seedbox_syncthing
    environment:
      - "PGID=${PGID}"
      - "PUID=${PUID}"
      - "TZ=${TZ}"
    image: linuxserver/syncthing
    labels:
      ovh.dispenser.service: "syncthing"
    ports:
      - "127.0.0.1:8384:8384"
      - "22000:22000"
      - "21027:21027/udp"
    restart: unless-stopped
    volumes:
      - "${MOUNT}/docker/data/syncthing:/config"
      - "${MOUNT}/library/movies:/mnt/library/movies"
      - "${MOUNT}/data/movies:/mnt/data/movies"
  nzbget:
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    image: "linuxserver/nzbget"
    labels:
      ovh.dispenser.service: "nzbget"
    ports:
      - "6789:6789"
    restart: "unless-stopped"
    volumes:
      - "${MOUNT}/docker/data/nzbget:/config"
      - "${MOUNT}/nzbget:/downloads"
  deluge:
    build:
      context: deluge
      args:
        deluge_version: 1.3.15
        libtorrent_version: 1.0.16
    environment:
      - "PGID=${PGID}"
      - "PUID=${PUID}"
      - "TZ=${TZ}"
      - "UMASK_SET=002"
    labels:
      ovh.dispenser.service: "deluge"
    ports:
      - "127.0.0.1:8112:8112"
      # it's suggested to use an ssh tunnel to connect to the daemon over the internet
      - "127.0.0.1:58846:58846"
      # both the ranges below can be used for incoming or outgoing ports
      - "58926:58946"
      - "58926:58946/udp"
    restart: unless-stopped
    volumes:
      - "${MOUNT}/docker/data/deluge:/config"
      - "${MOUNT}/data:/downloads"
  # couch:
  #   container_name: couch
  #   environment:
  #     - "PGID=${PGID}"
  #     - "PUID=${PUID}"
  #     - "TZ=${TZ}"
  #   image: linuxserver/couchpotato
  #   labels:
  #     ovh.dispenser.service: "couchpotato"
  #   ports:
  #     - 127.0.0.1:5050:5050
  #   restart: unless-stopped
  #   volumes:
  #     - "${MOUNT}/docker/data/couch:/config"
  #     - "${MOUNT}/data/movies:/downloads"
  #     - "${MOUNT}/library/movies:/movies"
  sonarr:
    container_name: sonarr
    environment:
      - "PGID=${PGID}"
      - "PUID=${PUID}"
      - "TZ=${TZ}"
    image: linuxserver/sonarr
    labels:
      ovh.dispenser.service: "sonarr"
    ports:
      - 127.0.0.1:8989:8989
    restart: unless-stopped
    volumes:
      - "${MOUNT}/docker/data/sonarr:/config"
      - "${MOUNT}/data/sonarr:${MOUNT}/data/sonarr"
      - "${MOUNT}/nzbget/completed/Sonarr:/downloads/completed/Sonarr"
      - "${MOUNT}/library/TV Shows:/tv"
  radarr:
    container_name: radarr
    environment:
      - "PGID=${PGID}"
      - "PUID=${PUID}"
      - "TZ=${TZ}"
    image: linuxserver/radarr
    labels:
      ovh.dispenser.service: "radarr"
    ports:
      - 127.0.0.1:7878:7878
    restart: unless-stopped
    volumes:
      - "${MOUNT}/docker/data/radarr:/config"
      - "${MOUNT}/nzbget/completed/Radarr:/downloads/completed/Radarr"
      - "${MOUNT}/library/Movies:/movies"
  jackett:
    container_name: jackett
    environment:
      - "PGID=${PGID}"
      - "PUID=${PUID}"
      - "TZ=${TZ}"
    image: linuxserver/jackett
    labels:
      ovh.dispenser.service: "jackett"
    ports:
      - 127.0.0.1:9117:9117
    restart: unless-stopped
    volumes:
      - "${MOUNT}/docker/data/jackett:/config"
      # - "${MOUNT}/blackhole:/downloads"
  # glances:
  #   build:
  #     context: "glances/docker"
  #     args:
  #       VERSION: 2.10
  #   container_name: "glances"
  #   environment:
  #     - "GLANCES_OPT=-w"
  #   labels:
  #     ovh.dispenser.service: "glances"
  #   pid: "host"
  #   ports:
  #     # - "127.0.0.1:61208-61209:61208-61209"
  #     - "61208-61209:61208-61209"
  #   restart: "unless-stopped"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #     - "${MOUNT}/docker/data/glances:/glances"
  organizr:
    container_name: organizr
    environment:
      - "PGID=${PGID}"
      - "PUID=${PUID}"
      - "TZ=${TZ}"
    image: lsiocommunity/organizr
    labels:
      ovh.dispenser: "organizr"
    ports:
      - "127.0.0.1:8095:80"
    restart: "unless-stopped"
    volumes:
      - "${MOUNT}/docker/data/organizr:/config"
  # muximux:
  #   environment:
  #     - "PGID=${PGID}"
  #     - "PUID=${PUID}"
  #     - "TZ=${TZ}"
  #   image: linuxserver/muximux
  #   labels:
  #     ovh.dispenser.service: "muximux"
  #   ports:
  #     "127.0.0.1:8094:80"
  #   restart: "unless-stopped"
  #   volumes:
  #     - "${MOUNT}/docker/data/muximux:/config"
  # filebot:
  #   build:
  #     context: filebot
  #     args:
  #       MEDIAINFO_VERSION: 0.7.98
  #       WEBHOOK_VERSION: master
  #       TAILON_VERSION: 1.3.0
  #   environment:
  #     - "PGID=${PGID}"
  #     - "PUID=${PUID}"
  #     - "TZ=${TZ}"
  #     - "TAILON_PORT=8080"
  #     - "TAILON_ROOT=/tailon/"
  #     - "WEBHOOK_ROOT=hooks"
  #   labels:
  #     ovh.dispenser.service: "filebot"
  #     # ovh.dispenser.filebot: "watcher"
  #   restart: unless-stopped
  #   volumes:
  #     - "${MOUNT}/docker/data/filebot:/config"
  #     # - "${MOUNT}/data:/media"
  # php-apache:
  #   # requires ruTorrent dir to be writable by uid 33 or gid 33 (www-data)
  #   image: php:7.1-apache
  #   network_mode: "host"
  #   # ports:
  #   #  - "8080:80"
  #   volumes:
  #     - "${MOUNT}/docker/ruTorrent:/var/www/html"
  #     - "${MOUNT}/docker/data/ports.conf:/etc/apache2/ports.conf"
      # contains: |
      # # If you just change the port or add more ports here, you will likely also
      # # have to change the VirtualHost statement in
      # # /etc/apache2/sites-enabled/000-default.conf
      # Listen 8080
      # <IfModule ssl_module>
      #     Listen 443
      # </IfModule>
      # <IfModule mod_gnutls.c>
      #     Listen 443
      # </IfModule>
      # # vim: syntax=apache ts=4 sw=4 sts=4 sr noet
  # nextcloud:
  #  environment:
  #    - "PUID=${UID}"
  #    - "PGID=${GID}"
  #  image: linuxserver/nextcloud
  #  ports:
  #    - 4433:443
  #  restart: unless-stopped
  #  volumes:
  #    - "${MOUNT}/nextcloud/data:/data"
  #    - "${MOUNT}/nextcloud/config:/config"
  #    - "/etc/letsencrypt/live/${DOMAIN}:/config/keys"
  plex:
    container_name: plex
    environment:
      - "TZ=${TZ}"
      - "PLEX_UID=108"
      - "PLEX_GID=116"
      - "PLEX_CLAIM=claim-mRZZo3FLk6XzGu2Q2mFz"
      - "CHANGE_CONFIG_DIR_OWNERSHIP=false"
      - "ADVERTISE_IP=http://91.121.108.175:32400/"
    # - "ALLOWED_NETWORKS=192.168.1.0/24,172.16.0.0/16"
    hostname: "dispenser"
    image: plexinc/pms-docker:plexpass
    ports:
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32400:32400/tcp
      - 32469:32469/tcp
    # - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
      - 33400:33400/tcp
      - 33443:33443/tcp
    restart: unless-stopped
    volumes:
      - "/var/lib/plexmediaserver:/config"
      - "/tmp/plex_transcode:/transcode"
      - "/home/devsterknight/library:/data:ro"
  # plexrequests:
  #   container_name: plexrequests
  #   environment:
  #     - "PUID=${PUID}"
  #     - "PGID=${PGID}"
  #     - "URL_BASE=/plexrequests"
  #     - "TZ=${TZ}"
  #   image: linuxserver/plexrequests
  #   ports:
  #     - 3003:3000
  #   restart: unless-stopped
  #   volumes:
  #     - "${MOUNT}/docker/data/plexrequests:/config"
  ombi:
    container_name: ombi
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    image: linuxserver/ombi
    # image: rogueosb/ombi
    ports:
      - 127.0.0.1:3579:3579
    restart: unless-stopped
    volumes:
      - "${MOUNT}/docker/data/ombi:/config"
  hydra2:
    container_name: hydra2
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "URL_BASE=/hydra2"
      - "TZ=${TZ}"
    image: linuxserver/hydra2
    ports:
      - 127.0.0.1:5076:5076
    restart: unless-stopped
    volumes:
      - "${MOUNT}/docker/data/hydra2:/config"
      - "${MOUNT}/nzbget/completed:/downloads"
  tautulli:
    container_name: tautulli
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    image: linuxserver/tautulli
    ports:
      - "8181:8181"
    restart: unless-stopped
    volumes:
      - "${MOUNT}/docker/data/tautulli:/config"
      - "/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Logs/:/logs:ro"
  znc:
    container_name: znc
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    image: linuxserver/znc
    ports:
      - "6501:6501"
    restart: unless-stopped
    volumes:
      - "${MOUNT}/.znc-docker:/config"
version: '3.5'
